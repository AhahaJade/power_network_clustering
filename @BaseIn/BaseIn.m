classdef BaseIn < handle
  % BaseIn: Base class for input data required by network partitioning
  %   algorithms. MatpowerIn and DigsiIn are its children classes.
   
  properties (SetAccess = private)
    id  % studycase/object id (string, autogenerated)
    caseid  % name of the MATPOWER or PowerFactory test case (string)
    n_pf  % number of power flows for each test case (whole number)
  end
  
  properties (Constant, Access = private)
    dflt_n_pf = 1;  % default value for the number of power flow cases
  end  
  
  % These properties can be modified in order to facilitate the exchange of 
  % input data objects between different PCs
  properties
    excelfile  % name of the excelfile with results (string, autogenerated)
    n_coh  % number of (assumed) coherent generator groups for each caseid and powerflow (whole number vector)
  end  
  
  methods
    
    function obj = BaseIn(varargin)
      % BaseIn initializer. It also works with no nargin == 0, but the 
      % maximal nargin is 8 (4 parameter-value pairs)        
                      
      assert(length(varargin) <= 8, [ mfilename(), ':TooManyInputs'],...
        '[%s] A %s object has at most 4 optional parameter-value pairs',...
        mfilename, mfilename);             
  
      % Create input parser and initialize the object
      p = inputParser;
      p = Utils.inputParserSetup(p);
      p.addParameter('caseid', '');
      p.addParameter('n_pf', BaseIn.dflt_n_pf);
      p.parse(varargin{:});
      varinp = p.Results;
      rst = p.Unmatched;
      obj.caseid = varinp.caseid;
      obj.n_pf = varinp.n_pf;
      p = inputParser;
      p = Utils.inputParserSetup(p);      
      p.addParameter('n_coh', BaseIn.dflt_n_coh(obj.n_pf));
      p.parse(rst);
      varinp = p.Results;
      trash = p.Unmatched;
      assert(isempty(fieldnames(trash)), [ mfilename, ':WrongKeyValueInput'],...
        ['[%s] Some unexpected key value pairs are detected. Please check your ',...
          'spelling. The legitimate keys for the constructor are: caseid, n_pf, ',...
          'n_coh.The following properties are generated automatically in the ',...
          'constructor: id, excelfile.'], mfilename);         
      obj.n_coh = Utils.chkVectorScalar(obj, varinp, 'n_coh', 'n_pf',...
        @BaseIn.dflt_n_coh, mfilename); % check size of n_coh
      
      % Generate random object ID & excelfile
      obj.id = Utils.rnd_str(10);
      tmp = clock;
      tmp = [num2str(tmp(4)), 'h', num2str(tmp(5)), 'm', num2str(floor(tmp(6))), 's'];
      if ~isempty(regexp(obj.caseid, '[/\*:?"<>|]', 'once'))
        obj.excelfile = fullfile(pwd, ['results_', tmp, '.xlsx']);
      else
        obj.excelfile = fullfile(pwd, [obj.caseid, '_', tmp, '.xlsx']);
      end
    end  
    
    function set.caseid(obj, caseid)
      assert(isa(caseid, 'char'),...
        [ mfilename, ':InvalidProperty'],...        
        '[%s] %s.caseid should be a string', mfilename, mfilename);              
      obj.caseid = caseid;
    end   
    
    function set.n_pf(obj, n_pf)
      assert(isscalar(n_pf) && Utils.isint(n_pf) && n_pf>0,...
        [ mfilename(), ':InvalidProperty'],...
        '[%s] %s.n_pf should be a positive integer scalar',...
        mfilename(), mfilename());
      obj.n_pf = n_pf;
    end
    
    function set.n_coh(obj, n_coh)
      assert(isvector(n_coh) && Utils.isint(n_coh),...
        [ mfilename, ':InvalidProperty'],...
        ['[%s] %s.n_coh should be an integer vector (one ',...
        'number for each caseid bus) or a nonnegative integer scalar (one ',...
        'number for ALL caseid buses)'], mfilename, mfilename);
      obj.n_coh = n_coh(:);
    end
    
  end
  
  methods (Static, Access = private)   
    function n_coh = dflt_n_coh(n_pf, new_dflt)
      % dflt_n_coh returns default n_coh as two coherent generator groups 
      %   for each power flow case
      
      switch nargin
        case 1
          n_coh = 2*ones(n_pf, 1);
        case 2
          n_coh = new_dflt*ones(n_pf, 1); 
        otherwise
          error([ mfilename, ':WrongPrivateInput'],...
            ['[%s] Wrong input to a private method: this shouldn''t ',...
            'ever happen!'], mfilename);
      end
    end    
  end
end

